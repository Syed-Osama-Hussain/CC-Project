class test {
  public function funct(){
    return 5

  }

  public function fn(){

  }
}

class baseClass {
  protected int y
  
  public function fn(){

  }

}

abstract class myclass extends baseClass {
      
  private var z
  private test x = new test [5]

  private myclass(){
    this->x = y
    b++
    this->y = x

  }

  public virtual function init(#a,b){

    this->x[i].funct()

    loop(int b = 1;x[3].fn()!=2; b++){
      break

      if(z<=b){
      this->fn()
      }


    }
  }

}

static function name(x,y) {
  float a
  int b
  int c = a*b <= b+a
  
  return a+b
  
}

int a = true,b = 7

myclass myobj = new myclass()
myobj.init(a,b)
myobj.y = b

int #myvar = new int


loop(int b = 1;a<b+3&&a[a+b*g<v&&4].fn()!=2; b++){
  fn()
  string b
  

  break
  }

if(i<b(z+a)-9)
{
  myclass::z.funct()
  string arr = new [i+c]
  float mynewvar = a+c
  
}
