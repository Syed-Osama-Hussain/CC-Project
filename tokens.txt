class class 1
test ID 1
{ { 1

 Terminator 1
public accessModifier 2
function function 2
funct ID 2
( ( 2
) ) 2
{ { 2

 Terminator 2
return return 3
5 IntConst 3

 Terminator 3

 Terminator 4
} } 5

 Terminator 5

 Terminator 6
public accessModifier 7
function function 7
fn ID 7
( ( 7
) ) 7
{ { 7

 Terminator 7

 Terminator 8
} } 9

 Terminator 9
} } 10

 Terminator 10

 Terminator 11
class class 12
baseClass ID 12
{ { 12

 Terminator 12
protected accessModifier 13
int DT 13
y ID 13

 Terminator 13

 Terminator 14
public accessModifier 15
function function 15
fn ID 15
( ( 15
) ) 15
{ { 15

 Terminator 15

 Terminator 16
} } 17

 Terminator 17

 Terminator 18
} } 19

 Terminator 19

 Terminator 20
abstract abstract 21
class class 21
myclass ID 21
extends extends 21
baseClass ID 21
{ { 21

 Terminator 21

 Terminator 22
private accessModifier 23
var DT 23
z ID 23

 Terminator 23
private accessModifier 24
test ID 24
x ID 24
= = 24
new new 24
test ID 24
[ [ 24
5 IntConst 24
] ] 24

 Terminator 24

 Terminator 25
private accessModifier 26
myclass ID 26
( ( 26
) ) 26
{ { 26

 Terminator 26
this this 27
-> -> 27
x ID 27
= = 27
y ID 27

 Terminator 27
b ID 28
++ inc_dec 28

 Terminator 28
this this 29
-> -> 29
y ID 29
= = 29
x ID 29

 Terminator 29

 Terminator 30
} } 31

 Terminator 31

 Terminator 32
public accessModifier 33
virtual virtual 33
function function 33
init ID 33
( ( 33
# # 33
a ID 33
, , 33
b ID 33
) ) 33
{ { 33

 Terminator 33

 Terminator 34
this this 35
-> -> 35
x ID 35
[ [ 35
i ID 35
] ] 35
. . 35
funct ID 35
( ( 35
) ) 35

 Terminator 35

 Terminator 36
loop loop 37
( ( 37
int DT 37
b ID 37
= = 37
1 IntConst 37
; ; 37
x ID 37
[ [ 37
3 IntConst 37
] ] 37
. . 37
fn ID 37
( ( 37
) ) 37
!= ROP 37
2 IntConst 37
; ; 37
b ID 37
++ inc_dec 37
) ) 37
{ { 37

 Terminator 37
break executionMod 38

 Terminator 38

 Terminator 39
if if 40
( ( 40
z ID 40
<= ROP 40
b ID 40
) ) 40
{ { 40

 Terminator 40
this this 41
-> -> 41
fn ID 41
( ( 41
) ) 41

 Terminator 41
} } 42

 Terminator 42

 Terminator 43

 Terminator 44
} } 45

 Terminator 45
} } 46

 Terminator 46

 Terminator 47
} } 48

 Terminator 48

 Terminator 49
static static 50
function function 50
name ID 50
( ( 50
) ) 50
{ { 50

 Terminator 50
float DT 51
a ID 51

 Terminator 51
int DT 52
b ID 52

 Terminator 52

 Terminator 53
return return 54
a ID 54
+ PM 54
b ID 54

 Terminator 54

 Terminator 55
} } 56

 Terminator 56

 Terminator 57
int DT 58
a ID 58
= = 58
true BoolConst 58
, , 58
b ID 58
= = 58
7 IntConst 58

 Terminator 58

 Terminator 59
myclass ID 60
myobj ID 60
= = 60
new new 60
myclass ID 60
( ( 60
) ) 60

 Terminator 60
myobj ID 61
. . 61
init ID 61
( ( 61
a ID 61
, , 61
b ID 61
) ) 61

 Terminator 61
myobj ID 62
. . 62
y ID 62
= = 62
b ID 62

 Terminator 62

 Terminator 63
int DT 64
# # 64
myvar ID 64
= = 64
new new 64
int DT 64

 Terminator 64

 Terminator 65

 Terminator 66
loop loop 67
( ( 67
int DT 67
b ID 67
= = 67
1 IntConst 67
; ; 67
a ID 67
< ROP 67
b ID 67
+ PM 67
3 IntConst 67
&& && 67
a ID 67
[ [ 67
a ID 67
+ PM 67
b ID 67
* MDM 67
g ID 67
< ROP 67
v ID 67
&& && 67
4 IntConst 67
] ] 67
. . 67
fn ID 67
( ( 67
) ) 67
!= ROP 67
2 IntConst 67
; ; 67
b ID 67
++ inc_dec 67
) ) 67
{ { 67

 Terminator 67
fn ID 68
( ( 68
) ) 68

 Terminator 68
string DT 69
b ID 69

 Terminator 69

 Terminator 70

 Terminator 71
break executionMod 72

 Terminator 72
} } 73

 Terminator 73

 Terminator 74
if if 75
( ( 75
i ID 75
< ROP 75
b ID 75
( ( 75
z ID 75
+ PM 75
a ID 75
) ) 75
- PM 75
9 IntConst 75
) ) 75

 Terminator 75
{ { 76

 Terminator 76
myclass ID 77
:: :: 77
z ID 77
. . 77
funct ID 77
( ( 77
) ) 77

 Terminator 77
string DT 78
arr ID 78
= = 78
new new 78
[ [ 78
i ID 78
+ PM 78
c ID 78
] ] 78

 Terminator 78
float DT 79
mynewvar ID 79
= = 79
a ID 79
+ PM 79
c ID 79

 Terminator 79

 Terminator 80
} } 81

 Terminator 81
$ $ 82
