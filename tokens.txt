class class 1
myclass ID 1
extends extends 1
baseClass ID 1
{ { 1

 Terminator 1

 Terminator 2
myclass ID 3
( ( 3
) ) 3
{ { 3

 Terminator 3
this this 4
-> -> 4
x ID 4
= = 4
y ID 4

 Terminator 4

 Terminator 5
} } 6

 Terminator 6

 Terminator 7
public accessModifier 8
virtual virtual 8
function function 8
init ID 8
( ( 8
# # 8
a ID 8
, , 8
b ID 8
) ) 8
{ { 8

 Terminator 8
this this 9
-> -> 9
x ID 9
[ [ 9
i ID 9
] ] 9
. . 9
funct ID 9
( ( 9
) ) 9

 Terminator 9
loop loop 10
( ( 10
int DT 10
b ID 10
= = 10
1 IntConst 10
; ; 10
a ID 10
< ROP 10
b ID 10
+ PM 10
3 IntConst 10
; ; 10
b ID 10
++ inc_dec 10
) ) 10
{ { 10

 Terminator 10
break executionMod 11

 Terminator 11

 Terminator 12
} } 13

 Terminator 13
} } 14

 Terminator 14

 Terminator 15
private accessModifier 16
var DT 16
z ID 16

 Terminator 16

 Terminator 17

 Terminator 18
} } 19

 Terminator 19

 Terminator 20
static static 21
function function 21
name ID 21
( ( 21
) ) 21
{ { 21

 Terminator 21
return return 22
a ID 22
+ PM 22
b ID 22

 Terminator 22

 Terminator 23
} } 24

 Terminator 24

 Terminator 25
obj ID 26
myobj ID 26
= = 26
new new 26
obj ID 26
( ( 26
5 IntConst 26
, , 26
3 IntConst 26
) ) 26

 Terminator 26

 Terminator 27

 Terminator 28
if if 29
( ( 29
i ID 29
< ROP 29
b ID 29
( ( 29
z ID 29
+ PM 29
a ID 29
) ) 29
- PM 29
9 IntConst 29
) ) 29

 Terminator 29
{ { 30

 Terminator 30
myclass ID 31
:: :: 31
z ID 31
. . 31
funct ID 31
( ( 31
) ) 31

 Terminator 31
string DT 32
arr ID 32
= = 32
new new 32
[ [ 32
i ID 32
+ PM 32
c ID 32
] ] 32

 Terminator 32

 Terminator 33
} } 34

 Terminator 34
$ $ 35
