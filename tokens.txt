class class 1
test ID 1
{ { 1

 Terminator 1
public accessModifier 2
function function 2
funct ID 2
( ( 2
) ) 2
{ { 2

 Terminator 2
return return 3
5 IntConst 3

 Terminator 3

 Terminator 4
} } 5

 Terminator 5

 Terminator 6
public accessModifier 7
function function 7
fn ID 7
( ( 7
) ) 7
{ { 7

 Terminator 7

 Terminator 8
} } 9

 Terminator 9

 Terminator 10
public accessModifier 11
int DT 11
k ID 11

 Terminator 11

 Terminator 12
} } 13

 Terminator 13

 Terminator 14
class class 15
baseClass ID 15
{ { 15

 Terminator 15
protected accessModifier 16
int DT 16
y ID 16

 Terminator 16

 Terminator 17
public accessModifier 18
function function 18
fn ID 18
( ( 18
) ) 18
{ { 18

 Terminator 18

 Terminator 19
} } 20

 Terminator 20

 Terminator 21
} } 22

 Terminator 22

 Terminator 23
abstract abstract 24
class class 24
myclass ID 24
extends extends 24
baseClass ID 24
{ { 24

 Terminator 24

 Terminator 25
private accessModifier 26
var DT 26
z ID 26

 Terminator 26
public accessModifier 27
test ID 27
x ID 27
= = 27
new new 27
test ID 27
[ [ 27
5 IntConst 27
] ] 27

 Terminator 27

 Terminator 28
private accessModifier 29
myclass ID 29
( ( 29
) ) 29
{ { 29

 Terminator 29
this this 30
-> -> 30
x ID 30
= = 30
y ID 30

 Terminator 30
b ID 31
++ inc_dec 31

 Terminator 31
this this 32
-> -> 32
y ID 32
= = 32
x ID 32

 Terminator 32

 Terminator 33
} } 34

 Terminator 34

 Terminator 35
public accessModifier 36
virtual virtual 36
function function 36
init ID 36
( ( 36
# # 36
a ID 36
, , 36
b ID 36
) ) 36
{ { 36

 Terminator 36

 Terminator 37
this this 38
-> -> 38
x ID 38
[ [ 38
i ID 38
] ] 38
. . 38
funct ID 38
( ( 38
) ) 38

 Terminator 38

 Terminator 39
loop loop 40
( ( 40
int DT 40
b ID 40
= = 40
1 IntConst 40
; ; 40
x ID 40
[ [ 40
3 IntConst 40
] ] 40
. . 40
fn ID 40
( ( 40
) ) 40
!= ROP 40
2 IntConst 40
; ; 40
b ID 40
++ inc_dec 40
) ) 40
{ { 40

 Terminator 40
break executionMod 41

 Terminator 41

 Terminator 42
if if 43
( ( 43
z ID 43
<= ROP 43
b ID 43
) ) 43
{ { 43

 Terminator 43
this this 44
-> -> 44
fn ID 44
( ( 44
) ) 44

 Terminator 44
} } 45

 Terminator 45

 Terminator 46

 Terminator 47
} } 48

 Terminator 48
} } 49

 Terminator 49

 Terminator 50
} } 51

 Terminator 51

 Terminator 52
static static 53
function function 53
name ID 53
( ( 53
x ID 53
, , 53
y ID 53
) ) 53
{ { 53

 Terminator 53
float DT 54
a ID 54

 Terminator 54
int DT 55
b ID 55

 Terminator 55
int DT 56
c ID 56
= = 56
a ID 56
* MDM 56
b ID 56
<= ROP 56
b ID 56
+ PM 56
a ID 56

 Terminator 56

 Terminator 57
return return 58
a ID 58
+ PM 58
b ID 58

 Terminator 58

 Terminator 59
} } 60

 Terminator 60

 Terminator 61
int DT 62
a ID 62
= = 62
true BoolConst 62
, , 62
b ID 62
= = 62
7 IntConst 62

 Terminator 62

 Terminator 63
myclass ID 64
myobj ID 64
= = 64
new new 64
myclass ID 64
( ( 64
) ) 64

 Terminator 64
myobj ID 65
. . 65
init ID 65
( ( 65
a ID 65
, , 65
b ID 65
) ) 65

 Terminator 65
myobj ID 66
. . 66
y ID 66
= = 66
b ID 66

 Terminator 66
myobj ID 67
. . 67
x ID 67
. . 67
k ID 67
= = 67
5 IntConst 67

 Terminator 67

 Terminator 68

 Terminator 69
int DT 70
# # 70
myvar ID 70
= = 70
new new 70
int DT 70

 Terminator 70

 Terminator 71

 Terminator 72
loop loop 73
( ( 73
int DT 73
b ID 73
= = 73
1 IntConst 73
; ; 73
a ID 73
< ROP 73
b ID 73
+ PM 73
3 IntConst 73
&& && 73
a ID 73
[ [ 73
a ID 73
+ PM 73
b ID 73
* MDM 73
g ID 73
< ROP 73
v ID 73
&& && 73
4 IntConst 73
] ] 73
. . 73
fn ID 73
( ( 73
) ) 73
!= ROP 73
2 IntConst 73
; ; 73
b ID 73
++ inc_dec 73
) ) 73
{ { 73

 Terminator 73
fn ID 74
( ( 74
) ) 74

 Terminator 74
string DT 75
b ID 75

 Terminator 75

 Terminator 76

 Terminator 77
break executionMod 78

 Terminator 78
} } 79

 Terminator 79

 Terminator 80
if if 81
( ( 81
i ID 81
< ROP 81
b ID 81
( ( 81
z ID 81
+ PM 81
a ID 81
) ) 81
- PM 81
9 IntConst 81
) ) 81

 Terminator 81
{ { 82

 Terminator 82
myclass ID 83
:: :: 83
z ID 83
. . 83
funct ID 83
( ( 83
) ) 83

 Terminator 83

 Terminator 84
string DT 85
arr ID 85
= = 85
new new 85
[ [ 85
i ID 85
+ PM 85
c ID 85
] ] 85

 Terminator 85
float DT 86
mynewvar ID 86
= = 86
a ID 86
+ PM 86
c ID 86

 Terminator 86

 Terminator 87
} } 88

 Terminator 88
$ $ 89
